from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen import canvas

# Create a custom document to add header and footer with logo and line
class MyDocTemplate(SimpleDocTemplate):
    def __init__(self, filename, **kw):
        SimpleDocTemplate.__init__(self, filename, **kw)

    def beforePage(self):
        # Add the header with logo and horizontal line below it
        
        # Draw the logo (image) at (x=40, y=750) with width 100 and height 50
        self.canvas.drawImage("logo.png", 40, 750, width=100, height=50)

        # Draw the horizontal line below the logo (at y=740)
        self.canvas.setStrokeColor(colors.blue)  # Set color of the line to blue
        self.canvas.setLineWidth(1)  # Set line width
        self.canvas.line(40, 740, 580, 740)  # Line from x=40, y=740 to x=580, y=740

    def afterPage(self):
        # Add the footer to each page
        self.canvas.setFont('Helvetica', 10)
        self.canvas.drawString(40, 20, "My Custom Footer - Page {}".format(self.page))

# Create the PDF file and document
pdf_file = "output_with_logo_and_line.pdf"
document = MyDocTemplate(pdf_file, pagesize=letter)

# Build the content of the PDF
content = []

# Define a function to create and add content for each page
def process_page(header_text, table_data):
    # Add header (as Paragraph)
    styles = getSampleStyleSheet()
    title_style = styles['Heading1']
    header_paragraph = Paragraph(f"<b>{header_text}</b>", title_style)

    # Add header to content
    content.append(header_paragraph)

    # Add table to content
    from reportlab.platypus import Table, TableStyle

    # Create a table from the given table data
    table = [table_data["col"]]  # Columns
    for key in table_data["row"]:
        table.append(table_data["row"][key])  # Rows

    # Create and style the table
    table_obj = Table(table)
    table_obj.setStyle(TableStyle([
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),  # Header row text color
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),        # Center-align all cells
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Make header bold
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),  # Header background color
        ('GRID', (0, 0), (-1, -1), 1, colors.black),   # Grid lines for the table
    ]))

    content.append(table_obj)

    # Add a page break for subsequent pages
    content.append(PageBreak())

# Sample JSON-like data (replace this with your actual data or read from a file)
data = [
    {
        "header": "Page 1 Header",
        "table": {
            "col": ["Column 1", "Column 2"],
            "row": {
                "0": ["val1", "val2"],
                "1": ["val3", "val4"]
            }
        }
    },
    {
        "header": "Page 2 Header",
        "table": {
            "col": ["Column 1", "Column 2"],
            "row": {
                "0": ["val5", "val6"],
                "1": ["val7", "val8"]
            }
        }
    }
]

# Process all pages in the data
for page_data in data:
    process_page(page_data["header"], page_data["table"])

# Build the document with the content
document.build(content)

print("PDF generated with logo and horizontal line successfully!")
